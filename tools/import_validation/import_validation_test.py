# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import pandas as pd
import unittest

from pandas.testing import assert_frame_equal
from tools.import_validation import import_validation

module_dir = os.path.dirname(__file__)


class TestValidation(unittest.TestCase):
    '''
  Test Class to run compare expected output in test/ directory to the
  output generated by ImportValidation class
  '''

    def test_validation(self):
        result_file = os.path.join(module_dir, 'test', 'test_output.csv')
        config_file = os.path.join(module_dir, 'test', 'test_config.json')
        differ_output = os.path.join(module_dir, 'test', 'differ_output.csv')
        validation_output = os.path.join(module_dir, 'validation_output.csv')

        validation = import_validation.ImportValidation(config_file,
                                                        differ_output, '',
                                                        validation_output)
        validation.run_validations()

        expected = pd.read_csv(result_file, keep_default_na=False)
        actual = pd.read_csv(os.path.join(module_dir, 'validation_output.csv'), keep_default_na=False)
        assert_frame_equal(actual, expected)

    def test_max_date_latest_validation(self):
        result_file = os.path.join(module_dir, 'test', 'expected_max_date_output.csv')
        config_file = os.path.join(module_dir, 'test', 'test_max_date_config.json')
        stats_summary_file = os.path.join(module_dir, 'test', 'stats_summary_max_date_test.csv')
        # differ_output is not used by MaxDate_Latest, so pass a dummy or empty path
        dummy_differ_output = os.path.join(module_dir, 'test', 'differ_output.csv') # Or simply ''
        validation_output_file = os.path.join(module_dir, 'test_max_date_validation_output.csv')

        validation = import_validation.ImportValidation(
            validation_config=config_file,
            differ_output=dummy_differ_output, # Not used by this specific validation
            stats_summary=stats_summary_file,
            validation_output=validation_output_file)
        validation.run_validations()

        expected_df = pd.read_csv(result_file, keep_default_na=False)
        actual_df = pd.read_csv(validation_output_file, keep_default_na=False)
        
        # Sort by 'test' description column to ensure consistent row order for comparison if needed,
        # though the order should be deterministic from the config file.
        # expected_df = expected_df.sort_values(by='test').reset_index(drop=True)
        # actual_df = actual_df.sort_values(by='test').reset_index(drop=True)

        try:
            assert_frame_equal(actual_df, expected_df)
        except AssertionError as e:
            print("Actual DataFrame that caused test failure:")
            print(actual_df.to_csv(index=False))
            raise e

if __name__ == '__main__':
    unittest.main()