main:
  params: [args]
  steps:
    - init:
        assign:
          - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - region: "us-central1"
          - imageUri: "gcr.io/datcom-ci/dc-import-executor:stable"
          - jobId: ${text.substring(args.jobName, 0, 50) + "-" + string(int(sys.now()))}
          - importName: ${args.importName}
          - importConfig: ${args.importConfig}
          - gcsMountBucket: "datcom-volume-mount"
          - gcsMountPath: "/tmp/gcs"
    - createAndRunBatchJob:
        call: googleapis.batch.v1.projects.locations.jobs.create
        args:
            parent: ${"projects/" + projectId + "/locations/" + region}
            jobId: ${jobId}
            body:
              allocationPolicy:
                instances:
                - policy:
                    machineType: ${args.resources.machine}
                    provisioningModel: "STANDARD"
                    bootDisk:
                      image: "projects/debian-cloud/global/images/family/debian-12"
                      size_gb: ${args.resources.disk}
                  installOpsAgent: true
              taskGroups:
                taskSpec:
                  volumes:
                    - gcs:
                        remotePath: ${gcsMountBucket}
                      mountPath: ${gcsMountPath}
                  computeResource:
                    cpuMilli: ${args.resources.cpu}
                    memoryMib: ${args.resources.memory}
                  runnables:
                    - container:
                        imageUri: ${imageUri}
                        commands:
                        - ${"--import_name=" + args.importName}
                        - ${"--import_config=" + args.importConfig}
                      environment:
                        variables:
                          IMPORT_NAME: ${importName}
                taskCount: 1
                parallelism: 1
              logsPolicy:
                destination: CLOUD_LOGGING
            connector_params:
                skip_polling: true
        result: createAndRunBatchJobResponse
    - returnResult:
        return:
          jobId: ${jobId}
          importName: ${importName}