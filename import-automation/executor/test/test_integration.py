import os
import unittest
import logging
from unittest import mock

from app import configs
from app import main
from test import utils

CWD = os.getcwd()
NUM_LINES_TO_CHECK = 50


class GCSBucketIOMock:
    def __init__(self, path_prefix='', bucket_name='', bucket=None, client=None):
        self.data = {}

    def upload_file(self, src, dest):
        self.data[dest] = src
        with open(src) as file:
            logging.warning(f'Generated {src}: {file.readline()}')
        assert utils.compare_lines(os.path.join(CWD, 'test', 'data', os.path.basename(src)), src, 50)

    def update_version(self, version):
        logging.warning(f'Version: {version}')
        assert version == '2020_07_15T12_07_17_365264_07_00'


def get_github_auth_access_token_mock():
    return os.environ.get('GITHUB_ACCESS_TOKEN', '')


@mock.patch('app.service.gcs_io.GCSBucketIO',
            GCSBucketIOMock)
@mock.patch('app.utils.pttime', lambda: '2020-07-15T12:07:17.365264-07:00')
@mock.patch('app.configs.standalone', lambda: True)
@mock.patch('app.configs.PROJECT_ID', 'datcom-cronjobs')
@mock.patch('app.configs.REPO_OWNER_USERNAME', 'datacommonsorg')
@mock.patch('app.configs.REPO_NAME', 'data')
@mock.patch('app.configs.BUCKET_NAME', 'datcom-prod-imports')
class StandaloneUpdateTest(unittest.TestCase):
    """Tests for updating imports in standalone mode (without interaction
    with the dashboard).

    To add a test case:
    1) Add a manifest.json to the import directory in the master branch of
       datacommonsorg/data.
    2) Copy the CSVs and MCFs that will be generated by the scripts to
       test/data. Only keep the first NUM_LINES_TO_CHECK (defined at the top)
       lines and a newline at the end.
    3) Add a test function below.
    """

    @classmethod
    def setUpClass(cls):
        os.environ['TMPDIR'] = CWD
        logging.getLogger().setLevel(logging.INFO)

    @classmethod
    def tearDownClass(cls):
        os.environ.pop('TMPDIR')

    def setUp(self):
        self.app = main.FLASK_APP.test_client()

    def test_treasury_update(self):
        self.app.post('/update', json={'absolute_import_name':
        'scripts/us_fed/treasury_constant_maturity_rates:all'})

    def test_covid_state_update(self):
        self.app.post('/update', json={'absolute_import_name':
        'scripts/covid_tracking_project/historic_state_data:all'})


@mock.patch('app.service.gcs_io.GCSBucketIO',
            GCSBucketIOMock)
@mock.patch('app.utils.pttime', lambda: '2020-07-15T12:07:17.365264-07:00')
class CommitTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        os.environ['TMPDIR'] = CWD

    @classmethod
    def tearDownClass(cls):
        os.environ.pop('TMPDIR')

    def setUp(self):
        self.app = main.FLASK_APP.test_client()

    @mock.patch('app.configs.get_github_auth_access_token', get_github_auth_access_token_mock)
    @mock.patch('app.service.dashboard_api.DashboardAPI')
    def test_treasury(self, _):
        self.app.post('/', json={'COMMIT_SHA': '9804f2fd2c5422a9f6b896e9c6862db61f9a8a08'})
